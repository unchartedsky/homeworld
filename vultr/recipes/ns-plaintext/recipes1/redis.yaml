apiVersion: v1
kind: ConfigMap
metadata:
  name: redis
  namespace: plaintext
data:
  go.sh: |
    #!/bin/bash -ex

    /opt/bitnami/scripts/redis/run.sh \
      --stop-writes-on-bgsave-error no \
      --bind 0.0.0.0 \
      --protected-mode no


# ---
# kind: PersistentVolumeClaim
# apiVersion: v1
# metadata:
#   name: redis
#   namespace: plaintext
#   labels:
#     app: redis
# spec:
#   storageClassName: default-ebs
#   accessModes:
#     - "ReadWriteOnce"
#   resources:
#     requests:
#       storage: "4Gi"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: plaintext
  labels:
    app: redis
    group: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        group: redis
    spec:
      # affinity:
      #   nodeAffinity:
      #     requiredDuringSchedulingIgnoredDuringExecution:
      #       nodeSelectorTerms:
      #         - matchExpressions:
      #             - key: kops.k8s.io/instancegroup
      #               operator: In
      #               values:
      #                 # - nodes-sts
      #                 - nodes
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      containers:
        - name: redis
          image: bitnami/redis:7.0.8-debian-11-r3
          # imagePullPolicy: IfNotPresent
          env:
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: REDIS_DISABLE_COMMANDS
              value: ""
            - name: MY_MEM_REQUEST
              valueFrom:
                resourceFieldRef:
                  containerName: redis
                  resource: requests.memory
            - name: MY_MEM_LIMIT
              valueFrom:
                resourceFieldRef:
                  containerName: redis
                  resource: limits.memory
          args:
            - /go.sh
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 30
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 5
            timeoutSeconds: 1
          # resources:
          #   requests:
          #     cpu: 500m
          #     memory: 2000Mi
          #   limits:
          #     cpu: 1000m
          #     memory: 4096Mi
          volumeMounts:
            - name: init-d
              mountPath: /go.sh
              subPath: go.sh
              readOnly: true
            # - name: redis-data
            #   mountPath: /bitnami
            #   subPath:
        - name: metrics
          image: "oliver006/redis_exporter:v0.11"
          # imagePullPolicy: IfNotPresent
          env:
            - name: REDIS_ALIAS
              value: redis
          ports:
            - name: metrics
              containerPort: 9121
          # resources:
          #   requests:
          #     cpu: 30m
          #     memory: 32Mi
          #   limits:
          #     cpu: 100m
          #     memory: 64Mi
      volumes:
        - name: init-d
          projected:
            defaultMode: 0555
            sources:
              - configMap:
                  name: redis
                  items:
                    - key: go.sh
                      path: go.sh
        # - name: redis-data
        #   persistentVolumeClaim:
        #     claimName: redis
      tolerations:
        - key: "dedicated"
          operator: "Equal"
          value: "sts"
          effect: "NoSchedule"

---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: plaintext
  labels:
    app: redis
  annotations:
    prometheus.io/port: "9121"
    prometheus.io/scrape: "true"
spec:
  type: ClusterIP
  ports:
    - name: redis
      port: 6379
      targetPort: redis
    - name: metrics
      port: 9121
      targetPort: metrics
  selector:
    app: redis
---
# 이 네트워크 정책을 활성화하면 ELB를 통해 Redis에 접근하는 기능도 막힌다.
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: redis-allow
  namespace: plaintext
spec:
  podSelector:
    matchLabels:
      app: redis
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: plaintext
        - namespaceSelector:
            matchLabels:
              name: monitoring
        # - namespaceSelector:
        #     matchLabels:
        #       name: ambassador
        # - namespaceSelector:
        #     matchLabels:
        #       name: actions-runner-system
